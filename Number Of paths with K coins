#include<bits/stdc++.h>
using namespace std;
long long dp[21][21][21];
int grid[21][21];
long long numberOfPaths(int sR,int sC,int n,int k)
{ 
   k=k-grid[sR][sC];
  if(k==0 && sR==n-1 && sC==n-1)
     return 1;
   
  if(k<=0 || sR==n-1 && sC==n-1)
     return 0;
   
  if(dp[sR][sC][k]!= -1)
     return dp[sR][sC][k];
   
  if(sR==n-1 && sC<n-1)
     return dp[sR][sC][k]=numberOfPaths(sR,sC+1,n,k);
   
  if(sR<n-1 && sC==n-1)
     return dp[sR][sC][k]=numberOfPaths(sR+1,sC,n,k);
   
 return dp[sR][sC][k]=numberOfPaths(sR+1,sC,n,k)+
        numberOfPaths(sR,sC+1,n,k);
}
int main() 
{
	int t;
	 cin>>t;
	while(t--)
     {
      int k;
       cin>>k;
      int n;
       cin>>n;
       for(int i=0;i<n;i++)
        {
          for(int j=0;j<n;j++)
           cin>>grid[i][j];
        }
        memset(dp,-1,sizeof(dp));
      cout<<numberOfPaths(0,0,n,k)<<endl;
     }
	return 0;
}
