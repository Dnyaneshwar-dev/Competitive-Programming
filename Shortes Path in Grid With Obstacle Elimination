struct  Node
{
    int x,y,e;
    Node(int x,int y,int e)
    {
        this->x=x;
        this->y=y;
        this->e=e;
    }
};

class Solution {
public:

    int shortestPath(vector<vector<int>>& grid, int k) {

        int m=grid.size();
        int n=grid[0].size();

        int dp[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
                dp[i][j]=INT_MAX;
        }

        queue<Node*>q;

        q.push(new Node(0,0,0));
        dp[0][0]=0;

        int X[]={1,-1,0,0};
        int Y[]={0,0,1,-1};
        int step=0;

        while(!q.empty())
        {
            //Size of Level
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                Node* cur=q.front();
                q.pop();


                int xc=cur->x;
                int yc=cur->y;
                int el=cur->e;

                if(xc==m-1 && yc==n-1)
                    return step;


                for(int i=0;i<4;i++)
                {

                    int xx=xc+X[i];
                    int yy=yc+Y[i];

                    if(xx<0 || yy<0 || xx>=m || yy>=n)
                        continue;

                    int use = grid[xx][yy] + el;

                    if(use > k || use >= dp[xx][yy])
                        continue;

                    dp[xx][yy]=use;

                    q.push(new Node(xx,yy,use));
                }

            }
            step++;

        }
        return -1;
    }
};
